<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="MyProject" default="main" basedir=".">

	<description>Compile-Test-TestReport-Makejar-</description>

	<property name="version" value="111111" />
	<property name="buildnum" value="111112" />
	<property name="src" location="src" />
	<property name="testdir" location="src" />
	<property name="build" location="bin/${version}/${buildnum}/Compile" />
	<property name="buildtest" location="bin/${version}/${buildnum}/Test" />
	<property name="dist" location="dist/${version}/${buildnum}" />
	<property name="report" location="reports/${version}/${buildnum}" />
	<property name="encoding" value="Cp1252" />
	




	<path id="classpath.test">

		<pathelement location="./lib/junit-4.10.jar" />
		<pathelement location="${testdir}" />
		<pathelement location="${src}" />

	</path>

	<path id="itext.lib">

		<pathelement location="./lib/itextpdf-5.5.9.jar" />
		<path refid="classpath.test" />

	</path>


	<path id="all.libs">


		<path refid="itext.lib" />


	</path>



	<target name="clean" description="clean up">

	

	</target>

	<target name="init" depends="clean">
		<tstamp />
		<mkdir dir="${build}" />
		<mkdir dir="${buildtest}" />
		<mkdir dir="${report}" />
		<mkdir dir="${report}/html/" />
		<mkdir dir="${report}/html_noframe/" />
		<mkdir dir="${report}/xml" />
		<mkdir dir="${dist}" />
	</target>



	<target name="compile" depends="init" description="compile the source">


		<javac srcdir="${src}" destdir="${build}" classpathref="all.libs" encoding="${encoding}" includeantruntime="false" nowarn="true" debug="on" />


		<javac srcdir="${testdir}" destdir="${buildtest}" includeantruntime="false" classpathref="classpath.test" />


	</target>
	<target name="test" depends="compile">
		<echo>Running the junit tests...</echo>

		<junit printsummary="yes" showoutput="yes">
			<classpath refid="classpath.test" />
			<classpath>
				<pathelement location="${buildtest}" />

			</classpath>


			<batchtest fork="yes" todir="${report}/xml">
				<fileset dir="${testdir}/">
					<include name="**/*Test*.java" />
					<!-- burda test suite clasıınıda bulup faıllerı ıkı kere gosterıyor burda sadece testsuıte sınıfını ıstemek daha 
     mantıklı sanırım. -->

					<include name="**/*Unit*.java" />


					<!-- <exclude name="**/*Stub*"/> -->
				</fileset>
			</batchtest>
			<!--   yada dırek ısım yazabıliriz...
   <test name="DemoUnit" /> 
   
   
   alttakı usefıle true olmak zorunda yoksa 
   html cıkartmıyor consela yazıyor sadece  html cıkartması ıcınde hepsının bır xml dosyaso olusması lazım report dosyasında
			 test spnuclarını xmle olsututur
   -->

			<formatter type="xml" usefile="true" />

		</junit>
	</target>

	<target name="test-reports" depends="test">


		<junitreport todir="${report}/xml">

			<fileset dir="${report}/xml">
				<include name="TEST-*.xml" /> <!-- her bir test ıcın xml olusur bu xmle bakarak htmle cevırır bır takım test sonuclarını xml e yazıyor 
				ve bu xmldeki seylerı html e cevırır. -->
			</fileset>
			<!-- <fileset dir="${report}">-->
			<!-- <include name="**/*Test*.java" />-->
			<!-- <include name="**/*Unit*.java" </fileset> /> 
   -->

			<!-- noframe yazarsak tek html dosyası olusur frame yazarsak bırden fazla olusuyor.
   burtun testler tek erkanda test sayısı cogaldıkca gorunum kotu olucak sanırım -->
			<report format="frames" todir="${report}/html" />
			<report format="noframes" todir="${report}/html_noframe" />
			<!-- xsl ornegı -->
			<!-- <report todir="${report}"
           styledir="report"
           format="frames">
           <param name="key1" expression="value1"/>
           <param name="key2" expression="value2"/>
       </report> 
-->
		</junitreport>


		<!-- pdf report ıcın libe dosya attım ama olmadı
  <junitpdfreport todir="${report}" styledir="${basedir}">
       <fileset dir="${report}"> 
           <include name="TEST-*.xml" />
       </fileset>
   </junitpdfreport>  -->



	</target>



	<target name="dist" depends="test-reports" description="generate the distribution">

		<jar jarfile="${dist}/rmi-gui-server.jar" manifest="./manifest/MANIFEST_S.MF">
			<zipgroupfileset dir="./lib" includes="*.jar" />
			<fileset dir="${build}" includes="**" />
		</jar>
		<jar jarfile="${dist}/rmi-gui-client.jar" manifest="./manifest/MANIFEST_C.MF">
			<zipgroupfileset dir="./lib" includes="*.jar" />
			<fileset dir="${build}" includes="**" />
		</jar>
	</target>




	<target name="main" depends="dist">
		<description>Main</description>
	</target>




</project>